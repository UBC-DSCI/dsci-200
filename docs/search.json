[
  {
    "objectID": "schedule/slides/00-intro-to-class.html#section",
    "href": "schedule/slides/00-intro-to-class.html#section",
    "title": "UBC DSCI 200",
    "section": "00 Intro to class",
    "text": "00 Intro to class\nDSCI 200\nKatie Burak, Gabriela V. Cohen Freue\nLast modified – 18 November 2024\n\\[\n\\DeclareMathOperator*{\\argmin}{argmin}\n\\DeclareMathOperator*{\\argmax}{argmax}\n\\DeclareMathOperator*{\\minimize}{minimize}\n\\DeclareMathOperator*{\\maximize}{maximize}\n\\DeclareMathOperator*{\\find}{find}\n\\DeclareMathOperator{\\st}{subject\\,\\,to}\n\\newcommand{\\E}{E}\n\\newcommand{\\Expect}[1]{\\E\\left[ #1 \\right]}\n\\newcommand{\\Var}[1]{\\mathrm{Var}\\left[ #1 \\right]}\n\\newcommand{\\Cov}[2]{\\mathrm{Cov}\\left[#1,\\ #2\\right]}\n\\newcommand{\\given}{\\ \\vert\\ }\n\\newcommand{\\X}{\\mathbf{X}}\n\\newcommand{\\x}{\\mathbf{x}}\n\\newcommand{\\y}{\\mathbf{y}}\n\\newcommand{\\P}{\\mathcal{P}}\n\\newcommand{\\R}{\\mathbb{R}}\n\\newcommand{\\norm}[1]{\\left\\lVert #1 \\right\\rVert}\n\\newcommand{\\snorm}[1]{\\lVert #1 \\rVert}\n\\newcommand{\\tr}[1]{\\mbox{tr}(#1)}\n\\newcommand{\\brt}{\\widehat{\\beta}^R_{s}}\n\\newcommand{\\brl}{\\widehat{\\beta}^R_{\\lambda}}\n\\newcommand{\\bls}{\\widehat{\\beta}_{ols}}\n\\newcommand{\\blt}{\\widehat{\\beta}^L_{s}}\n\\newcommand{\\bll}{\\widehat{\\beta}^L_{\\lambda}}\n\\newcommand{\\U}{\\mathbf{U}}\n\\newcommand{\\D}{\\mathbf{D}}\n\\newcommand{\\V}{\\mathbf{V}}\n\\]"
  },
  {
    "objectID": "schedule/slides/00-intro-to-class.html#about-us",
    "href": "schedule/slides/00-intro-to-class.html#about-us",
    "title": "UBC DSCI 200",
    "section": "About us",
    "text": "About us\n\n\n\nDr. Katie Burak\nkburak@stat.ubc.ca\nhttps://katieburak.github.io/\nAssistant Professor of Teaching, Department of Statistics\n\n\n\n\n\nDr. Gabriela V. Cohen Freue\ngcohen@stat.ubc.ca\nhttps://gcohenfr.github.io/\nAssociate Professor, Department of Statistics"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": " Syllabus",
    "section": "",
    "text": "Term 2025 Winter 2: January - April 2026"
  },
  {
    "objectID": "syllabus.html#course-info",
    "href": "syllabus.html#course-info",
    "title": " Syllabus",
    "section": "Course info",
    "text": "Course info\nInstructors:\nKatie Burak\nWebsite: https://katieburak.github.io/\nEmail: kburak@stat.ubc.ca\n\nGabriela V. Cohen Freue\nWebsite: https://gcohenfr.github.io/\nEmail: gcohen@stat.ubc.ca\n\nOffice hours:\nSee Canvas for times and locations.\nCourse webpage:\nWWW: https://ubc-stat.github.io/dsci-200/\nCanvas: https://canvas.ubc.ca/courses/\nLectures/Labs:\nSee Canvas for times and locations.\nPrerequisite:\nDSCI 100"
  },
  {
    "objectID": "syllabus.html#course-objectives",
    "href": "syllabus.html#course-objectives",
    "title": " Syllabus",
    "section": "Course objectives",
    "text": "Course objectives\nThe course objective is to train students in navigating the many aspects of data needed to successfully work through the data stage of the data analysis lifecycle. Students will broaden their applied statistical knowledge base and skillset required to dive into statistical and computational modelling in subsequent courses. Students will learn how to explore different layers of the data structure, consider the limitations introduced by the study design, acknowledge security and ownership features related to data, and address problems encountered in the data at hand. The course also aims to demonstrate how simulation studies can be carried out to examine properties of estimators and algorithms (i.e., beyond the data stage). The course reinforces and refines the computational skills (i.e., writing computer scripts), tools and resources learned in DSCI_V 100 to analyze data, as well as to draw and communicate appropriate conclusions.\n\nLearning outcomes\n\nConstructively reflect on how the data was collected for the statistical question being asked. Identify improvements and where improvements cannot be made and clearly discuss the limitations of the study design with regards to the conclusions that can be drawn for the question being asked.\nDetermine the data acquisition strategy needed for a given data source and use common data science tools to write reproducible computer scripts to read the data into the chosen programming language from that data source.\nIdentify when data simulation is a useful technique for assessing an analysis method, as well as plan and carryout appropriate simulations based on the task at hand.\nIdentify outliers and data anomalies, justify and apply strategies for managing the these, and reflect on the consequences with regards to the conclusions of the chosen method.\nIdentify when and why data are missing, justify and apply strategies for managing the missing data, and reflect on the consequences with regards to the conclusions of the chosen method.\nPlan and carry out exploratory data analysis using statistical and visualization techniques for the purpose of generating hypotheses and planning a further valid statistical analysis.\nAppraise the impact of measurement scales, units, significant digits, and measurement error on data analysis, as well as using simple methods to mitigate these effects on results of the analysis.\nEvaluate and justify the data privacy needs for a given data analysis, and where needed, choose and apply an appropriate data privacy technique. Reflect on the consequences with regards to the conclusions of the chosen method.\nEvaluate and justify who owns the data for a given case."
  },
  {
    "objectID": "computing/windows.html",
    "href": "computing/windows.html",
    "title": " Windows",
    "section": "",
    "text": "If you have already installed Git, LaTeX, or any of the R packages, you should be OK. However, if you have difficulty with Homework or Labs, we may ask you to uninstall and try again.\nIn order to be able to support you effectively and minimize setup issues and software conflicts, we suggest you install the required software as specified below.\nIn all the sections below, if you are presented with the choice to download either a 64-bit (also called x64) or a 32-bit (also called x86) version of the application always choose the 64-bit version."
  },
  {
    "objectID": "computing/windows.html#installation-notes",
    "href": "computing/windows.html#installation-notes",
    "title": " Windows",
    "section": "",
    "text": "If you have already installed Git, LaTeX, or any of the R packages, you should be OK. However, if you have difficulty with Homework or Labs, we may ask you to uninstall and try again.\nIn order to be able to support you effectively and minimize setup issues and software conflicts, we suggest you install the required software as specified below.\nIn all the sections below, if you are presented with the choice to download either a 64-bit (also called x64) or a 32-bit (also called x86) version of the application always choose the 64-bit version."
  },
  {
    "objectID": "computing/windows.html#terminal",
    "href": "computing/windows.html#terminal",
    "title": " Windows",
    "section": "Terminal",
    "text": "Terminal\nBy “Terminal” below we mean the command line program called “Terminal”. Note that this is also available Inside RStudio. Either works."
  },
  {
    "objectID": "computing/windows.html#github",
    "href": "computing/windows.html#github",
    "title": " Windows",
    "section": "GitHub",
    "text": "GitHub\nIn this course we will use the publicly available GitHub.com. If you do not already have an account, please sign up for one at GitHub.com\nSign up for a free account at GitHub.com if you don’t have one already."
  },
  {
    "objectID": "computing/windows.html#git-bash-and-windows-terminal",
    "href": "computing/windows.html#git-bash-and-windows-terminal",
    "title": " Windows",
    "section": "Git, Bash, and Windows Terminal",
    "text": "Git, Bash, and Windows Terminal\nAlthough these three are separate programs, we are including them in the same section here since they are packaged together in the same installer on Windows. Briefly, we will be using the Bash shell to interact with our computers via a command line interface, Git to keep a version history of our files and upload to/download from to GitHub, and Windows Terminal to run the both Bash and Git.\nGo to https://git-scm.com/download/win and download the windows version of git. After the download has finished, run the installer and accept the default configuration for all pages except for the following:\n\nOn the Select Components page, add a Git Bash profile to Windows Terminal.\n\n\nTo install windows terminal visit this link and click Get to open it in Windows Store. Inside the Store, click Get again and then click Install. After installation, click Launch to start Windows Terminal. In the top of the window, you will see the tab bar with one open tab, a plus sign, and a down arrow. Click the down arrow and select Settings (or type the shortcut Ctrl + ,). In the Startup section, click the dropdown menu under Default profile and select Git Bash.\n\nYou can now launch the Windows terminal from the start menu or pin it to the taskbar like any other program (you can read the rest of the article linked above for additional tips if you wish). To make sure everything worked, close down Windows Terminal, and open it again. Git Bash should open by default, the text should be green and purple, and the tab should read MINGW64:/c/Users/$USERNAME (you should also see /c/Users/$USERNAME if you type pwd into the terminal). This screenshot shows what it should look like:\n\n\n\n\n\n\n\nNote\n\n\n\nWhenever we refer to “the terminal” in these installation instructions, we want you to use the Windows Terminal that you just installed with the Git Bash profile. Do not use Windows PowerShell, CMD, or anything else unless explicitly instructed to do so.\n\n\nTo open a new tab you can click the plus sign or use Ctrl + Shift + t (you can close a tab with Ctrl + Shift + w). To copy text from the terminal, you can highlight it with the mouse and then click Ctrl + Shift + c. To paste text you use Ctrl + Shift + v, try it by pasting the following into the terminal to check which version of Bash you just installed:\nbash --version\nThe output should look similar to this:\nGNU bash, version 4.4.23(1)-release (x86_64-pc-sys)\nCopyright (C) 2019 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;\nThis is free software; you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n\n\n\n\n\nNote\n\n\n\nIf there is a newline (the enter character) in the clipboard when you are pasting into the terminal, you will be asked if you are sure you want to paste since this newline will act as if you pressed enter and run the command. As a guideline you can press Paste anyway unless you are sure you don’t want this to happen.\n\n\nLet’s also check which version of git was installed:\ngit --version\ngit version 2.32.0.windows.2\n\n\n\n\n\n\nNote\n\n\n\nSome of the Git commands we will use are only available since Git 2.23, so make sure your if your Git is at least this version.\n\n\n\nConfiguring Git user info\nNext, we need to configure Git by telling it your name and email. To do this, type the following into the terminal (replacing Jane Doe and janedoe@example.com, with your name and email that you used to sign up for GitHub, respectively):\ngit config --global user.name \"Jane Doe\"\ngit config --global user.email janedoe@example.com\n\n\n\n\n\n\nNote\n\n\n\nTo ensure that you haven’t made a typo in any of the above, you can view your global Git configurations by either opening the configuration file in a text editor (e.g. via the command nano ~/.gitconfig) or by typing git config --list --global).\n\n\nIf you have never used Git before, we recommend also setting the default editor:\ngit config --global core.editor nano\nIf you prefer VScode (and know how to set it up) or something else, feel free."
  },
  {
    "objectID": "computing/windows.html#github-pat",
    "href": "computing/windows.html#github-pat",
    "title": " Windows",
    "section": "Github PAT",
    "text": "Github PAT\nYou’re probably familiar with 2-factor authentication for your UBC account or other accounts which is a very secure way to protect sensitive information (in case your password gets exposed). Github uses a Personal Access Token (PAT) for the Command Line Interface (CLI) and RStudio. This is different from the password you use to log in with a web browser. You will have to create one. There are some nice R functions that will help you along, and I find that easiest.\nComplete instructions are in Chapter 9 of Happy Git With R. Here’s the quick version (you need the usethis and gitcreds libraries, which you can install with install.packages(c(\"usethis\", \"gitcreds\"))):\n\nIn the RStudio Console, call usethis::create_github_token() This should open a webbrowser. In the Note field, write what you like, perhaps “DSCI 200 token”. Then update the Expiration to any date after December 15. (“No expiration” is fine, though not very secure). Make sure that everything in repo is checked. Leave all other checks as is. Scroll to the bottom and click the green “Generate Token” button.\nThis should now give you a long string to Copy. It often looks like ghp_0asfjhlasdfhlkasjdfhlksajdhf9234u. Copy that. (You would use this instead of the browser password in RStudio when it asks for a password).\nTo store the PAT permanently in R (so you’ll never have to do this again, hopefully) call gitcreds::gitcreds_set() and paste the thing you copied there."
  },
  {
    "objectID": "computing/windows.html#post-installation-notes",
    "href": "computing/windows.html#post-installation-notes",
    "title": " Windows",
    "section": "Post-installation notes",
    "text": "Post-installation notes\nYou have completed the installation instructions, well done 🙌!"
  },
  {
    "objectID": "computing/windows.html#attributions",
    "href": "computing/windows.html#attributions",
    "title": " Windows",
    "section": "Attributions",
    "text": "Attributions\nThe DSCI 310 Teaching Team, notably, Anmol Jawandha, Tomas Beuzen, Rodolfo Lourenzutti, Joel Ostblom, Arman Seyed-Ahmadi, Florencia D’Andrea, and Tiffany Timbers."
  },
  {
    "objectID": "computing/mac_x86.html",
    "href": "computing/mac_x86.html",
    "title": " MacOS x86",
    "section": "",
    "text": "If you have already installed Git, LaTeX, or any of the R packages, you should be OK. However, if you have difficulty with Homework or Labs, we may ask you to uninstall and try again.\nIn order to be able to support you effectively and minimize setup issues and software conflicts, we suggest you install the required software as specified below.\nIn all the sections below, if you are presented with the choice to download either a 64-bit (also called x64) or a 32-bit (also called x86) version of the application always choose the 64-bit version."
  },
  {
    "objectID": "computing/mac_x86.html#installation-notes",
    "href": "computing/mac_x86.html#installation-notes",
    "title": " MacOS x86",
    "section": "",
    "text": "If you have already installed Git, LaTeX, or any of the R packages, you should be OK. However, if you have difficulty with Homework or Labs, we may ask you to uninstall and try again.\nIn order to be able to support you effectively and minimize setup issues and software conflicts, we suggest you install the required software as specified below.\nIn all the sections below, if you are presented with the choice to download either a 64-bit (also called x64) or a 32-bit (also called x86) version of the application always choose the 64-bit version."
  },
  {
    "objectID": "computing/mac_x86.html#terminal",
    "href": "computing/mac_x86.html#terminal",
    "title": " MacOS x86",
    "section": "Terminal",
    "text": "Terminal\nBy “Terminal” below we mean the command line program called “Terminal”. Note that this is also available Inside RStudio. Either works. To easily pull up the Terminal (outside RStudio), Type Cmd + Space then begin typing “Terminal” and press Return."
  },
  {
    "objectID": "computing/mac_x86.html#github",
    "href": "computing/mac_x86.html#github",
    "title": " MacOS x86",
    "section": "GitHub",
    "text": "GitHub\nIn this course we will use the publicly available GitHub.com. If you do not already have an account, please sign up for one at GitHub.com\nSign up for a free account at GitHub.com if you don’t have one already."
  },
  {
    "objectID": "computing/mac_x86.html#git",
    "href": "computing/mac_x86.html#git",
    "title": " MacOS x86",
    "section": "Git",
    "text": "Git\nWe will be using the command line version of Git as well as Git through RStudio. Some of the Git commands we will use are only available since Git 2.23, so if your Git is older than this version, we ask you to update it using the Xcode command line tools (not all of Xcode), which includes Git.\nOpen Terminal and type the following command to install Xcode command line tools:\nxcode-select --install\nAfter installation, in terminal type the following to ask for the version:\ngit --version\nyou should see something like this (does not have to be the exact same version) if you were successful:\ngit version 2.32.1 (Apple Git-133)\n\n\n\n\n\n\nNote\n\n\n\nIf you run into trouble, please see the Install Git Mac OS section from Happy Git and GitHub for the useR for additional help or strategies for Git installation.\n\n\n\nConfiguring Git user info\nNext, we need to configure Git by telling it your name and email. To do this, type the following into the terminal (replacing Jane Doe and janedoe@example.com, with your name and email that you used to sign up for GitHub, respectively):\ngit config --global user.name \"Jane Doe\"\ngit config --global user.email janedoe@example.com\n\n\n\n\n\n\nNote\n\n\n\nTo ensure that you haven’t made a typo in any of the above, you can view your global Git configurations by either opening the configuration file in a text editor (e.g. via the command nano ~/.gitconfig) or by typing git config --list --global).\n\n\nIf you have never used Git before, we recommend also setting the default editor:\ngit config --global core.editor nano\nIf you prefer VScode (and know how to set it up) or something else, feel free."
  },
  {
    "objectID": "computing/mac_x86.html#github-pat",
    "href": "computing/mac_x86.html#github-pat",
    "title": " MacOS x86",
    "section": "Github PAT",
    "text": "Github PAT\nYou’re probably familiar with 2-factor authentication for your UBC account or other accounts which is a very secure way to protect sensitive information (in case your password gets exposed). Github uses a Personal Access Token (PAT) for the Command Line Interface (CLI) and RStudio. This is different from the password you use to log in with a web browser. You will have to create one. There are some nice R functions that will help you along, and I find that easiest.\nComplete instructions are in Chapter 9 of Happy Git With R. Here’s the quick version (you need the usethis and gitcreds libraries, which you can install with install.packages(c(\"usethis\", \"gitcreds\"))):\n\nIn the RStudio Console, call usethis::create_github_token() This should open a web browser. In the Note field, write what you like, perhaps “DSCI 200 token”. Then update the Expiration to any date after December 15. (“No expiration” is fine, though not very secure). Make sure that everything in repo is checked. Leave all other checks as is. Scroll to the bottom and click the green “Generate Token” button.\nThis should now give you a long string to Copy. It often looks like ghp_0asfjhlasdfhlkasjdfhlksajdhf9234u. Copy that. (You would use this instead of the browser password in RStudio when it asks for a password).\nTo store the PAT permanently in R (so you’ll never have to do this again, hopefully) call gitcreds::gitcreds_set() and paste the thing you copied there."
  },
  {
    "objectID": "computing/mac_x86.html#post-installation-notes",
    "href": "computing/mac_x86.html#post-installation-notes",
    "title": " MacOS x86",
    "section": "Post-installation notes",
    "text": "Post-installation notes\nYou have completed the installation instructions, well done 🙌!"
  },
  {
    "objectID": "computing/mac_x86.html#attributions",
    "href": "computing/mac_x86.html#attributions",
    "title": " MacOS x86",
    "section": "Attributions",
    "text": "Attributions\nThe DSCI 310 Teaching Team, notably, Anmol Jawandha, Tomas Beuzen, Rodolfo Lourenzutti, Joel Ostblom, Arman Seyed-Ahmadi, Florencia D’Andrea, and Tiffany Timbers."
  },
  {
    "objectID": "computing/index.html",
    "href": "computing/index.html",
    "title": " Computing",
    "section": "",
    "text": "In order to participate in this class, we will require the use of R, and encourage the use of RStudio. Both are free, and you likely already have both.\nYou also need Git, Github and Slack.\nBelow are instructions for installation. These are edited and simplified from the DSCI 310 Setup Instructions."
  },
  {
    "objectID": "computing/index.html#laptop-requirements",
    "href": "computing/index.html#laptop-requirements",
    "title": " Computing",
    "section": "Laptop requirements",
    "text": "Laptop requirements\n\nRuns one of the following operating systems: Ubuntu 20.04, macOS (version 11.4.x or higher), Windows 10 (version 2004, 20H2, 21H1 or higher).\n\nWhen installing Ubuntu, checking the box “Install third party…” will (among other things) install proprietary drivers, which can be helpful for wifi and graphics cards.\n\nCan connect to networks via a wireless connection for on campus work\nHas at least 30 GB disk space available\nHas at least 4 GB of RAM\nUses a 64-bit CPU\nIs at most 6 years old (4 years old or newer is recommended)\nUses English as the default language. Using other languages is possible, but we have found that it often causes problems in the homework. We’ve done our best to fix them, but we may ask you to change it if you are having trouble.\nStudent user has full administrative access to the computer."
  },
  {
    "objectID": "computing/index.html#software-installation-instructions",
    "href": "computing/index.html#software-installation-instructions",
    "title": " Computing",
    "section": "Software installation instructions",
    "text": "Software installation instructions\nPlease click the appropriate link below to view the installation instructions for your operating system:\n\nmacOS x86 or macOS arm\nUbuntu\nWindows"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DSCI 200",
    "section": "",
    "text": "Schedule Syllabus\n\n\nAt the end of the course, you will be able to:\n\nChoose a data acquisition strategy and write reproducible scripts to read data.\nDetermine when data simulation is useful for analysis and plan appropriate simulations.\nIdentify and manage outliers and anomalies, reflecting on their impact on conclusions.\nAddress missing data, apply handling strategies, and assess their effect on conclusions.\nPerform exploratory data analysis and understand its role in the data science pipeline.\nEvaluate the impact of measurement scales, units, and errors, and apply methods to minimize them.\nAssess data privacy needs, apply techniques where necessary and reflect on their impact.\nEvaluate who owns the data in a given case."
  },
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": " Frequently asked questions",
    "section": "",
    "text": "Answer 1\n\n\n\n\n\n\n\n\n\nTo be eligible\n\n\n\n\nCondition 1\nCondition 2"
  },
  {
    "objectID": "faq.html#faq-1",
    "href": "faq.html#faq-1",
    "title": " Frequently asked questions",
    "section": "",
    "text": "Answer 1\n\n\n\n\n\n\n\n\n\nTo be eligible\n\n\n\n\nCondition 1\nCondition 2"
  },
  {
    "objectID": "computing/mac_arm.html",
    "href": "computing/mac_arm.html",
    "title": " MacOS ARM",
    "section": "",
    "text": "If you have already installed Git, LaTeX, or any of the R packages, you should be OK. However, if you have difficulty with Homework or Labs, we may ask you to uninstall and try again.\nIn order to be able to support you effectively and minimize setup issues and software conflicts, we suggest you install the required software as specified below.\nIn all the sections below, if you are presented with the choice to download either a 64-bit (also called x64) or a 32-bit (also called x86) version of the application always choose the 64-bit version."
  },
  {
    "objectID": "computing/mac_arm.html#installation-notes",
    "href": "computing/mac_arm.html#installation-notes",
    "title": " MacOS ARM",
    "section": "",
    "text": "If you have already installed Git, LaTeX, or any of the R packages, you should be OK. However, if you have difficulty with Homework or Labs, we may ask you to uninstall and try again.\nIn order to be able to support you effectively and minimize setup issues and software conflicts, we suggest you install the required software as specified below.\nIn all the sections below, if you are presented with the choice to download either a 64-bit (also called x64) or a 32-bit (also called x86) version of the application always choose the 64-bit version."
  },
  {
    "objectID": "computing/mac_arm.html#terminal",
    "href": "computing/mac_arm.html#terminal",
    "title": " MacOS ARM",
    "section": "Terminal",
    "text": "Terminal\nBy “Terminal” below we mean the command line program called “Terminal”. Note that this is also available Inside RStudio. Either works. To easily pull up the Terminal (outside RStudio), Type Cmd + Space then begin typing “Terminal” and press Return."
  },
  {
    "objectID": "computing/mac_arm.html#github",
    "href": "computing/mac_arm.html#github",
    "title": " MacOS ARM",
    "section": "GitHub",
    "text": "GitHub\nIn this course we will use the publicly available GitHub.com. If you do not already have an account, please sign up for one at GitHub.com\nSign up for a free account at GitHub.com if you don’t have one already."
  },
  {
    "objectID": "computing/mac_arm.html#git",
    "href": "computing/mac_arm.html#git",
    "title": " MacOS ARM",
    "section": "Git",
    "text": "Git\nWe will be using the command line version of Git as well as Git through RStudio. Some of the Git commands we will use are only available since Git 2.23, so if your Git is older than this version, we ask you to update it using the Xcode command line tools (not all of Xcode), which includes Git.\nOpen Terminal and type the following command to install Xcode command line tools:\nxcode-select --install\nAfter installation, in terminal type the following to ask for the version:\ngit --version\nyou should see something like this (does not have to be the exact same version) if you were successful:\ngit version 2.32.1 (Apple Git-133)\n\n\n\n\n\n\nNote\n\n\n\nIf you run into trouble, please see the Install Git Mac OS section from Happy Git and GitHub for the useR for additional help or strategies for Git installation.\n\n\n\nConfiguring Git user info\nNext, we need to configure Git by telling it your name and email. To do this, type the following into the terminal (replacing Jane Doe and janedoe@example.com, with your name and email that you used to sign up for GitHub, respectively):\ngit config --global user.name \"Jane Doe\"\ngit config --global user.email janedoe@example.com\n\n\n\n\n\n\nNote\n\n\n\nTo ensure that you haven’t made a typo in any of the above, you can view your global Git configurations by either opening the configuration file in a text editor (e.g. via the command nano ~/.gitconfig) or by typing git config --list --global).\n\n\nIf you have never used Git before, we recommend also setting the default editor:\ngit config --global core.editor nano\nIf you prefer VScode (and know how to set it up) or something else, feel free."
  },
  {
    "objectID": "computing/mac_arm.html#github-pat",
    "href": "computing/mac_arm.html#github-pat",
    "title": " MacOS ARM",
    "section": "Github PAT",
    "text": "Github PAT\nYou’re probably familiar with 2-factor authentication for your UBC account or other accounts which is a very secure way to protect sensitive information (in case your password gets exposed). Github uses a Personal Access Token (PAT) for the Command Line Interface (CLI) and RStudio. This is different from the password you use to log in with a web browser. You will have to create one. There are some nice R functions that will help you along, and I find that easiest.\nComplete instructions are in Chapter 9 of Happy Git With R. Here’s the quick version (you need the usethis and gitcreds libraries, which you can install with install.packages(c(\"usethis\", \"gitcreds\"))):\n\nIn the RStudio Console, call usethis::create_github_token() This should open a webbrowser. In the Note field, write what you like, perhaps “DSCI 200 token”. Then update the Expiration to any date after December 15. (“No expiration” is fine, though not very secure). Make sure that everything in repo is checked. Leave all other checks as is. Scroll to the bottom and click the green “Generate Token” button.\nThis should now give you a long string to Copy. It often looks like ghp_0asfjhlasdfhlkasjdfhlksajdhf9234u. Copy that. (You would use this instead of the browser password in RStudio when it asks for a password).\nTo store the PAT permanently in R (so you’ll never have to do this again, hopefully) call gitcreds::gitcreds_set() and paste the thing you copied there."
  },
  {
    "objectID": "computing/mac_arm.html#post-installation-notes",
    "href": "computing/mac_arm.html#post-installation-notes",
    "title": " MacOS ARM",
    "section": "Post-installation notes",
    "text": "Post-installation notes\nYou have completed the installation instructions, well done 🙌!"
  },
  {
    "objectID": "computing/mac_arm.html#attributions",
    "href": "computing/mac_arm.html#attributions",
    "title": " MacOS ARM",
    "section": "Attributions",
    "text": "Attributions\nThe DSCI 310 Teaching Team, notably, Anmol Jawandha, Tomas Beuzen, Rodolfo Lourenzutti, Joel Ostblom, Arman Seyed-Ahmadi, Florencia D’Andrea, and Tiffany Timbers."
  },
  {
    "objectID": "computing/ubuntu.html",
    "href": "computing/ubuntu.html",
    "title": " Ubuntu",
    "section": "",
    "text": "If you have already installed Git, LaTeX, or any of the R packages, you should be OK. However, if you have difficulty with Homework or Labs, we may ask you to uninstall and try again.\nIn order to be able to support you effectively and minimize setup issues and software conflicts, we suggest you install the required software as specified below."
  },
  {
    "objectID": "computing/ubuntu.html#installation-notes",
    "href": "computing/ubuntu.html#installation-notes",
    "title": " Ubuntu",
    "section": "",
    "text": "If you have already installed Git, LaTeX, or any of the R packages, you should be OK. However, if you have difficulty with Homework or Labs, we may ask you to uninstall and try again.\nIn order to be able to support you effectively and minimize setup issues and software conflicts, we suggest you install the required software as specified below."
  },
  {
    "objectID": "computing/ubuntu.html#ubuntu-software-settings",
    "href": "computing/ubuntu.html#ubuntu-software-settings",
    "title": " Ubuntu",
    "section": "Ubuntu software settings",
    "text": "Ubuntu software settings\nTo ensure that you are installing the right version of the software in this guide, open “Software & Updates” and make sure that the boxes in the screenshot are checked (this is the default configuration)."
  },
  {
    "objectID": "computing/ubuntu.html#github",
    "href": "computing/ubuntu.html#github",
    "title": " Ubuntu",
    "section": "GitHub",
    "text": "GitHub\nIn this course we will use the publicly available GitHub.com. If you do not already have an account, please sign up for one at GitHub.com\nSign up for a free account at GitHub.com if you don’t have one already."
  },
  {
    "objectID": "computing/ubuntu.html#git",
    "href": "computing/ubuntu.html#git",
    "title": " Ubuntu",
    "section": "Git",
    "text": "Git\nWe will be using the command line version of Git as well as Git through RStudio. Some of the Git commands we will use are only available since Git 2.23, so if your Git is older than this version, so if your Git is older than this version, we ask you to update it using the following commands:\nsudo apt update\nsudo apt install git\nYou can check your git version with the following command:\ngit --version\n\n\n\n\n\n\nNote\n\n\n\nIf you run into trouble, please see the Install Git Linux section from Happy Git and GitHub for the useR for additional help or strategies for Git installation.\n\n\n\nConfiguring Git user info\nNext, we need to configure Git by telling it your name and email. To do this, type the following into the terminal (replacing Jane Doe and janedoe@example.com, with your name and email that you used to sign up for GitHub, respectively):\ngit config --global user.name \"Jane Doe\"\ngit config --global user.email janedoe@example.com\n\n\n\n\n\n\nNote\n\n\n\nTo ensure that you haven’t made a typo in any of the above, you can view your global Git configurations by either opening the configuration file in a text editor (e.g. via the command nano ~/.gitconfig) or by typing git config --list --global).\n\n\nIf you have never used Git before, we recommend also setting the default editor:\ngit config --global core.editor nano\nIf you prefer VScode (and know how to set it up) or something else, feel free."
  },
  {
    "objectID": "computing/ubuntu.html#github-pat",
    "href": "computing/ubuntu.html#github-pat",
    "title": " Ubuntu",
    "section": "Github PAT",
    "text": "Github PAT\nYou’re probably familiar with 2-factor authentication for your UBC account or other accounts which is a very secure way to protect sensitive information (in case your password gets exposed). Github uses a Personal Access Token (PAT) for the Command Line Interface (CLI) and RStudio. This is different from the password you use to log in with a web browser. You will have to create one. There are some nice R functions that will help you along, and I find that easiest.\nComplete instructions are in Chapter 9 of Happy Git With R. Here’s the quick version (you need the usethis and gitcreds libraries, which you can install with install.packages(c(\"usethis\", \"gitcreds\"))):\n\nIn the RStudio Console, call usethis::create_github_token() This should open a webbrowser. In the Note field, write what you like, perhaps “DSCI 200 token”. Then update the Expiration to any date after December 15. (“No expiration” is fine, though not very secure). Make sure that everything in repo is checked. Leave all other checks as is. Scroll to the bottom and click the green “Generate Token” button.\nThis should now give you a long string to Copy. It often looks like ghp_0asfjhlasdfhlkasjdfhlksajdhf9234u. Copy that. (You would use this instead of the browser password in RStudio when it asks for a password).\nTo store the PAT permanently in R (so you’ll never have to do this again, hopefully) call gitcreds::gitcreds_set() and paste the thing you copied there."
  },
  {
    "objectID": "computing/ubuntu.html#post-installation-notes",
    "href": "computing/ubuntu.html#post-installation-notes",
    "title": " Ubuntu",
    "section": "Post-installation notes",
    "text": "Post-installation notes\nYou have completed the installation instructions, well done 🙌!"
  },
  {
    "objectID": "computing/ubuntu.html#attributions",
    "href": "computing/ubuntu.html#attributions",
    "title": " Ubuntu",
    "section": "Attributions",
    "text": "Attributions\nThe DSCI 310 Teaching Team, notably, Anmol Jawandha, Tomas Beuzen, Rodolfo Lourenzutti, Joel Ostblom, Arman Seyed-Ahmadi, Florencia D’Andrea, and Tiffany Timbers."
  },
  {
    "objectID": "schedule/index.html",
    "href": "schedule/index.html",
    "title": " Schedule",
    "section": "",
    "text": "Slides are listed below for each lesson."
  },
  {
    "objectID": "schedule/index.html#final-exam",
    "href": "schedule/index.html#final-exam",
    "title": " Schedule",
    "section": "Final exam",
    "text": "Final exam\n\n\n\n\n\n\nImportant\n\n\n\nDo not make any plans to leave Vancouver before the final exam date is announced.\n\n\n\nIn person attendance is required (per Faculty of Science guidelines)"
  },
  {
    "objectID": "schedule/slides/web-data.html#fictional-tech-startup-job-applicant-tracker",
    "href": "schedule/slides/web-data.html#fictional-tech-startup-job-applicant-tracker",
    "title": "UBC DSCI 200",
    "section": "Fictional Tech Startup Job Applicant Tracker",
    "text": "Fictional Tech Startup Job Applicant Tracker\nThis table shows simulated job applicant data for a fictional tech startup based in Vancouver. It includes fake information like applicant ID, first name, email, position applied for, years of experience, degree major, postal code, salary expectation, and willingness to relocate. All data is synthetic and is meant for practicing web scraping and data privacy techniques.\n\n\n\n\n\n\nApplicant ID\n\n\nFirst Name\n\n\nPosition Applied\n\n\nYears of Experience\n\n\nDegree Major\n\n\nCurrent Location\n\n\nSalary Expectation\n\n\nWilling to Relocate\n\n\n\n\n\n\n10001\n\n\nAmira\n\n\nData Scientist\n\n\n3\n\n\nComputer Science\n\n\nToronto\n\n\n$85,000\n\n\nNo\n\n\n\n\n10002\n\n\nJacob\n\n\nData Engineer\n\n\n7\n\n\nComputer Science\n\n\nMontreal\n\n\n$110,000\n\n\nYes\n\n\n\n\n10003\n\n\nSofia\n\n\nData Engineer\n\n\n2\n\n\nData Science\n\n\nCalgary\n\n\n$80,000\n\n\nNo\n\n\n\n\n10004\n\n\nRaj\n\n\nMachine Learning Engineer\n\n\n12\n\n\nMathematics\n\n\nToronto\n\n\n$150,000\n\n\nYes\n\n\n\n\n10005\n\n\nEmily\n\n\nData Scientist\n\n\n5\n\n\nStatistics\n\n\nVancouver\n\n\n$95,000\n\n\nNo\n\n\n\n\n10006\n\n\nWei\n\n\nData Scientist\n\n\n9\n\n\nStatistics\n\n\nCalgary\n\n\n$125,000\n\n\nYes\n\n\n\n\n10007\n\n\nHassan\n\n\nData Engineer\n\n\n1\n\n\nMathematics\n\n\nMontreal\n\n\n$80,000\n\n\nNo\n\n\n\n\n10008\n\n\nIsabella\n\n\nData Engineer\n\n\n4\n\n\nComputer Science\n\n\nToronto\n\n\n$90,000\n\n\nYes\n\n\n\n\n10009\n\n\nLiam\n\n\nMachine Learning Engineer\n\n\n15\n\n\nMathematics\n\n\nCalgary\n\n\n$180,000\n\n\nYes\n\n\n\n\n10010\n\n\nOlivia\n\n\nData Engineer\n\n\n8\n\n\nStatistics\n\n\nVancouver\n\n\n$110,000\n\n\nNo\n\n\n\n\n10011\n\n\nMateo\n\n\nData Scientist\n\n\n6\n\n\nData Science\n\n\nToronto\n\n\n$105,000\n\n\nYes\n\n\n\n\n10012\n\n\nZara\n\n\nData Engineer\n\n\n10\n\n\nStatistics\n\n\nVancouver\n\n\n$130,000\n\n\nNo\n\n\n\n\n10013\n\n\nOmar\n\n\nData Engineer\n\n\n3\n\n\nStatistics\n\n\nCalgary\n\n\n$85,000\n\n\nNo\n\n\n\n\n10014\n\n\nMaya\n\n\nMachine Learning Engineer\n\n\n13\n\n\nMathematics\n\n\nMontreal\n\n\n$155,000\n\n\nYes\n\n\n\n\n10015\n\n\nEthan\n\n\nData Scientist\n\n\n4\n\n\nComputer Science\n\n\nToronto\n\n\n$90,000\n\n\nNo\n\n\n\n\n10016\n\n\nYuna\n\n\nData Scientist\n\n\n7\n\n\nStatistics\n\n\nVancouver\n\n\n$115,000\n\n\nYes\n\n\n\n\n10017\n\n\nAlex\n\n\nData Engineer\n\n\n5\n\n\nComputer Science\n\n\nMontreal\n\n\n$100,000\n\n\nNo\n\n\n\n\n10018\n\n\nFatima\n\n\nData Engineer\n\n\n2\n\n\nData Science\n\n\nToronto\n\n\n$80,000\n\n\nNo\n\n\n\n\n10019\n\n\nDavid\n\n\nMachine Learning Engineer\n\n\n16\n\n\nMathematics\n\n\nCalgary\n\n\n$190,000\n\n\nYes\n\n\n\n\n10020\n\n\nClaire\n\n\nData Scientist\n\n\n9\n\n\nData Science\n\n\nVancouver\n\n\n$120,000\n\n\nNo\n\n\n\n\n10021\n\n\nKai\n\n\nData Scientist\n\n\n1\n\n\nData Science\n\n\nMontreal\n\n\n$80,000\n\n\nNo\n\n\n\n\n10022\n\n\nSana\n\n\nData Engineer\n\n\n8\n\n\nStatistics\n\n\nToronto\n\n\n$115,000\n\n\nYes\n\n\n\n\n10023\n\n\nLeo\n\n\nData Engineer\n\n\n6\n\n\nMathematics\n\n\nCalgary\n\n\n$105,000\n\n\nNo\n\n\n\n\n10024\n\n\nJasmine\n\n\nMachine Learning Engineer\n\n\n14\n\n\nMathematics\n\n\nVancouver\n\n\n$165,000\n\n\nYes\n\n\n\n\n10025\n\n\nMichael\n\n\nData Scientist\n\n\n3\n\n\nStatistics\n\n\nMontreal\n\n\n$85,000\n\n\nNo\n\n\n\n\n10026\n\n\nAisha\n\n\nData Scientist\n\n\n10\n\n\nStatistics\n\n\nToronto\n\n\n$130,000\n\n\nNo\n\n\n\n\n10027\n\n\nJason\n\n\nData Engineer\n\n\n4\n\n\nComputer Science\n\n\nCalgary\n\n\n$95,000\n\n\nYes\n\n\n\n\n10028\n\n\nNina\n\n\nData Engineer\n\n\n7\n\n\nData Science\n\n\nToronto\n\n\n$115,000\n\n\nNo\n\n\n\n\n10029\n\n\nRavi\n\n\nMachine Learning Engineer\n\n\n11\n\n\nMathematics\n\n\nVancouver\n\n\n$140,000\n\n\nNo\n\n\n\n\n10030\n\n\nGrace\n\n\nData Scientist\n\n\n5\n\n\nData Science\n\n\nMontreal\n\n\n$100,000\n\n\nYes"
  },
  {
    "objectID": "schedule/slides/web-data.html",
    "href": "schedule/slides/web-data.html",
    "title": "Web Data Table",
    "section": "",
    "text": "This table shows simulated job applicant data for a fictional tech startup based in Vancouver. It includes fake information like applicant ID, first name, email, position applied for, years of experience, degree major, postal code, salary expectation, and willingness to relocate. All data is synthetic and is meant for practicing web scraping and data privacy techniques.\n\n\n\n\n\n\nApplicant ID\n\n\nFirst Name\n\n\nPosition Applied\n\n\nYears of Experience\n\n\nDegree Major\n\n\nCurrent Location\n\n\nSalary Expectation\n\n\nWilling to Relocate\n\n\n\n\n\n\n10001\n\n\nAmira\n\n\nData Scientist\n\n\n3\n\n\nComputer Science\n\n\nToronto\n\n\n$85,000\n\n\nNo\n\n\n\n\n10002\n\n\nJacob\n\n\nData Engineer\n\n\n7\n\n\nComputer Science\n\n\nMontreal\n\n\n$110,000\n\n\nYes\n\n\n\n\n10003\n\n\nSofia\n\n\nData Engineer\n\n\n2\n\n\nData Science\n\n\nCalgary\n\n\n$80,000\n\n\nNo\n\n\n\n\n10004\n\n\nRaj\n\n\nMachine Learning Engineer\n\n\n12\n\n\nMathematics\n\n\nToronto\n\n\n$150,000\n\n\nYes\n\n\n\n\n10005\n\n\nEmily\n\n\nData Scientist\n\n\n5\n\n\nStatistics\n\n\nVancouver\n\n\n$95,000\n\n\nNo\n\n\n\n\n10006\n\n\nWei\n\n\nData Scientist\n\n\n9\n\n\nStatistics\n\n\nCalgary\n\n\n$125,000\n\n\nYes\n\n\n\n\n10007\n\n\nHassan\n\n\nData Engineer\n\n\n1\n\n\nMathematics\n\n\nMontreal\n\n\n$80,000\n\n\nNo\n\n\n\n\n10008\n\n\nIsabella\n\n\nData Engineer\n\n\n4\n\n\nComputer Science\n\n\nToronto\n\n\n$90,000\n\n\nYes\n\n\n\n\n10009\n\n\nLiam\n\n\nMachine Learning Engineer\n\n\n15\n\n\nMathematics\n\n\nCalgary\n\n\n$180,000\n\n\nYes\n\n\n\n\n10010\n\n\nOlivia\n\n\nData Engineer\n\n\n8\n\n\nStatistics\n\n\nVancouver\n\n\n$110,000\n\n\nNo\n\n\n\n\n10011\n\n\nMateo\n\n\nData Scientist\n\n\n6\n\n\nData Science\n\n\nToronto\n\n\n$105,000\n\n\nYes\n\n\n\n\n10012\n\n\nZara\n\n\nData Engineer\n\n\n10\n\n\nStatistics\n\n\nVancouver\n\n\n$130,000\n\n\nNo\n\n\n\n\n10013\n\n\nOmar\n\n\nData Engineer\n\n\n3\n\n\nStatistics\n\n\nCalgary\n\n\n$85,000\n\n\nNo\n\n\n\n\n10014\n\n\nMaya\n\n\nMachine Learning Engineer\n\n\n13\n\n\nMathematics\n\n\nMontreal\n\n\n$155,000\n\n\nYes\n\n\n\n\n10015\n\n\nEthan\n\n\nData Scientist\n\n\n4\n\n\nComputer Science\n\n\nToronto\n\n\n$90,000\n\n\nNo\n\n\n\n\n10016\n\n\nYuna\n\n\nData Scientist\n\n\n7\n\n\nStatistics\n\n\nVancouver\n\n\n$115,000\n\n\nYes\n\n\n\n\n10017\n\n\nAlex\n\n\nData Engineer\n\n\n5\n\n\nComputer Science\n\n\nMontreal\n\n\n$100,000\n\n\nNo\n\n\n\n\n10018\n\n\nFatima\n\n\nData Engineer\n\n\n2\n\n\nData Science\n\n\nToronto\n\n\n$80,000\n\n\nNo\n\n\n\n\n10019\n\n\nDavid\n\n\nMachine Learning Engineer\n\n\n16\n\n\nMathematics\n\n\nCalgary\n\n\n$190,000\n\n\nYes\n\n\n\n\n10020\n\n\nClaire\n\n\nData Scientist\n\n\n9\n\n\nData Science\n\n\nVancouver\n\n\n$120,000\n\n\nNo\n\n\n\n\n10021\n\n\nKai\n\n\nData Scientist\n\n\n1\n\n\nData Science\n\n\nMontreal\n\n\n$80,000\n\n\nNo\n\n\n\n\n10022\n\n\nSana\n\n\nData Engineer\n\n\n8\n\n\nStatistics\n\n\nToronto\n\n\n$115,000\n\n\nYes\n\n\n\n\n10023\n\n\nLeo\n\n\nData Engineer\n\n\n6\n\n\nMathematics\n\n\nCalgary\n\n\n$105,000\n\n\nNo\n\n\n\n\n10024\n\n\nJasmine\n\n\nMachine Learning Engineer\n\n\n14\n\n\nMathematics\n\n\nVancouver\n\n\n$165,000\n\n\nYes\n\n\n\n\n10025\n\n\nMichael\n\n\nData Scientist\n\n\n3\n\n\nStatistics\n\n\nMontreal\n\n\n$85,000\n\n\nNo\n\n\n\n\n10026\n\n\nAisha\n\n\nData Scientist\n\n\n10\n\n\nStatistics\n\n\nToronto\n\n\n$130,000\n\n\nNo\n\n\n\n\n10027\n\n\nJason\n\n\nData Engineer\n\n\n4\n\n\nComputer Science\n\n\nCalgary\n\n\n$95,000\n\n\nYes\n\n\n\n\n10028\n\n\nNina\n\n\nData Engineer\n\n\n7\n\n\nData Science\n\n\nToronto\n\n\n$115,000\n\n\nNo\n\n\n\n\n10029\n\n\nRavi\n\n\nMachine Learning Engineer\n\n\n11\n\n\nMathematics\n\n\nVancouver\n\n\n$140,000\n\n\nNo\n\n\n\n\n10030\n\n\nGrace\n\n\nData Scientist\n\n\n5\n\n\nData Science\n\n\nMontreal\n\n\n$100,000\n\n\nYes"
  }
]