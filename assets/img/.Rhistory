library(tidyr)
library(dplyr)
# Example assuming your data frame is df
# Convert all columns except the row index to character to avoid type clashes
df2 <- df %>%
mutate(row = row_number()) %>%
mutate(across(-row, as.character))
missing_df <- df2 %>%
pivot_longer(-row, names_to = "variable", values_to = "value") %>%
mutate(missing = is.na(value))
ggplot(missing_df, aes(x = variable, y = row, fill = missing)) +
geom_tile(color = NA) +
scale_fill_manual(values = c(`TRUE` = "#89ABE3", `FALSE` = "transparent")) +
theme_minimal() +
theme(
panel.background = element_rect(fill = "#1a2b4c", color = NA),
plot.background = element_rect(fill = "#1a2b4c", color = NA),
panel.grid = element_blank(),
axis.text = element_text(color = "white"),
axis.title = element_blank(),
legend.position = "none"
) +
scale_y_reverse()
ggplot(missing_df, aes(x = variable, y = row, fill = missing)) +
geom_tile(color = NA) +
scale_fill_manual(values = c(`TRUE` = "#89ABE3")) +
theme_minimal() +
theme(
panel.background = element_rect(fill = "#1a2b4c", color = NA),
plot.background = element_rect(fill = "#1a2b4c", color = NA),
panel.grid = element_blank(),
axis.text = element_text(color = "white"),
axis.title = element_blank(),
legend.position = "none"
) +
scale_y_reverse()
# Load required libraries
library(dplyr)
library(tidyr)
library(ggplot2)
# Example: create a sample data frame with some missing values
set.seed(123)
df <- data.frame(
A = c(1, NA, 3, 4),
B = c(NA, 2, 3, NA),
C = c(1, 2, NA, 4),
D = c(NA, NA, 3, 4)
)
# Get variable order for x-axis
levels <- names(df)
# Prepare data for plotting
missing_data <- df %>%
mutate(id = row_number()) %>%
pivot_longer(-id, names_to = "key", values_to = "val") %>%
mutate(isna = is.na(val))
# Create the plot
missing_plot <- ggplot(missing_data, aes(x = key, y = id, fill = isna)) +
geom_raster(alpha = 0.8) +
scale_fill_manual(
name = "",
values = c('FALSE' = NA, 'TRUE' = "#89ABE3"),
labels = c("Present", "Missing")
) +
scale_x_discrete(limits = levels) +
labs(
x = "Variable",
y = "Row Number",
title = "Missing values in rows"
) +
coord_flip() +
theme_minimal() +
theme(
panel.background = element_rect(fill = "#1a2b4c", color = NA),
plot.background = element_rect(fill = "#1a2b4c", color = NA),
panel.grid = element_blank(),
axis.text = element_text(color = "white"),
axis.title = element_text(color = "white"),
legend.position = "bottom",
legend.text = element_text(color = "white"),
legend.background = element_rect(fill = "#1a2b4c", color = NA)
)
# Display the plot
print(missing_plot)
# Display the plot
missing_plot
library(dplyr)
library(tidyr)
library(ggplot2)
# Sample data with missing values
set.seed(42)
df <- data.frame(
Var1 = c(1, NA, 3, 4, 5),
Var2 = c(NA, 2, NA, 4, 5),
Var3 = c(1, 2, 3, NA, NA),
Var4 = c(NA, NA, 3, 4, 5)
)
# Prepare data for plot
plot_data <- df %>%
mutate(Row = row_number()) %>%
pivot_longer(-Row, names_to = "Variable", values_to = "Value") %>%
mutate(Missing = is.na(Value))
# Create the plot
ggplot(plot_data, aes(x = Variable, y = Row, fill = Missing)) +
geom_tile(color = "white", size = 0.5) +   # white grid lines
scale_fill_manual(values = c(`TRUE` = "#89ABE3", `FALSE` = "#1a2b4c")) +
scale_y_reverse() +   # So row 1 is at the top
coord_fixed() +       # Equal aspect ratio (square tiles)
labs(title = "Missing Data Matrix",
x = "Variable",
y = "Row Number",
fill = "Missing") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "#1a2b4c", color = NA),
plot.background = element_rect(fill = "#1a2b4c", color = NA),
panel.grid = element_blank(),
axis.text = element_text(color = "white"),
axis.title = element_text(color = "white"),
legend.position = "bottom",
legend.text = element_text(color = "white"),
legend.background = element_rect(fill = "#1a2b4c", color = NA)
)
library(dplyr)
library(naniar)
install.packages("naniar")
library(dplyr)
library(naniar)
library(visdat)
library(ggplot2)
set.seed(123)
# Generate synthetic data: 200 rows, 10 variables
n_rows <- 200
n_vars <- 10
df <- as.data.frame(
matrix(
sample(c(1:100, NA), n_rows * n_vars, replace = TRUE, prob = c(rep(0.95/100, 100), 0.05)),
nrow = n_rows,
ncol = n_vars
)
)
colnames(df) <- paste0("Var", 1:n_vars)
# naniar missingness matrix with custom colors
p1 <- gg_miss_fct(df, fct = "Var1") +
theme_minimal()
# Missing data matrix with visdat and custom colors
p2 <- vis_miss(df) +
scale_fill_manual(values = c(missing = "#89ABE3", complete = "#1a2b4c")) +
theme_minimal() +
theme(
panel.background = element_rect(fill = "#1a2b4c", color = NA),
plot.background = element_rect(fill = "#1a2b4c", color = NA),
axis.text = element_text(color = "white"),
legend.text = element_text(color = "white"),
legend.background = element_rect(fill = "#1a2b4c", color = NA)
)
# Print the visdat plot (more matrix-like)
print(p2)
library(dplyr)
library(naniar)
library(visdat)
library(ggplot2)
set.seed(123)
# Generate synthetic data with 200 rows and 10 columns, ~5% missing
n_rows <- 200
n_vars <- 10
df <- as.data.frame(
matrix(
sample(c(1:100, NA), n_rows * n_vars, replace = TRUE, prob = c(rep(0.95/100, 100), 0.05)),
nrow = n_rows,
ncol = n_vars
)
)
colnames(df) <- paste0("Var", 1:n_vars)
# visdat plot with correct fill values in scale_fill_manual
vis_miss(df) +
scale_fill_manual(
values = c("complete" = "#1a2b4c", "missing" = "#89ABE3"),
name = "Data status",
labels = c("Complete", "Missing")
) +
theme_minimal() +
theme(
panel.background = element_rect(fill = "#1a2b4c", color = NA),
plot.background = element_rect(fill = "#1a2b4c", color = NA),
axis.text = element_text(color = "white"),
legend.text = element_text(color = "white"),
legend.background = element_rect(fill = "#1a2b4c", color = NA),
legend.title = element_text(color = "white")
)
library(ggplot2)
library(dplyr)
# Simulate data
set.seed(123)
n <- 30
df <- data.frame(
x = 1:n,
y = rnorm(n, 10, 3)
)
# Introduce missing values randomly in y
missing_idx <- sample(1:n, 6)
df$y_missing <- df$y
df$y_missing[missing_idx] <- NA
# Simple mean imputation
mean_y <- mean(df$y_missing, na.rm = TRUE)
df$y_imputed <- ifelse(is.na(df$y_missing), mean_y, df$y_missing)
# Mark points as original, missing, or imputed for plotting
df$status <- "Original"
df$status[missing_idx] <- "Missing"
df$status_imputed <- "Imputed"
df$status_imputed <- ifelse(is.na(df$y_missing), "Imputed", "Original")
# Plot
ggplot(df, aes(x, y_imputed)) +
geom_point(data = df %>% filter(status == "Original"), color = "blue", size = 3) +
geom_point(data = df %>% filter(status == "Missing"), shape = 1, color = "red", size = 3, stroke = 1.5) +
geom_point(data = df %>% filter(status_imputed == "Imputed"), color = "green", size = 3, shape = 17) +
theme_minimal() +
labs(title = "Imputation Visualization",
subtitle = "Blue = Original, Red circle = Missing, Green triangle = Imputed")
plot(1)
plot(1)
dev.off()  # closes current graphics device, resetting parameters
plot(1)
dev.off()  # closes current graphics device, resetting parameters
graphics.off()  # closes all open graphics devices, resets par()
par(bg = "white")
plot(1)
plot(1)
plot(1)
library(ggplot2)
set.seed(123)  # for reproducibility
# Simulate data for 3 groups
n <- 50
df <- data.frame(
x = c(rnorm(n, mean = 0, sd = 1),
rnorm(n, mean = 3, sd = 1.2),
rnorm(n, mean = 6, sd = 0.8)),
y = c(rnorm(n, mean = 0, sd = 1),
rnorm(n, mean = 4, sd = 1.5),
rnorm(n, mean = 1, sd = 0.7)),
group = factor(rep(c("A", "B", "C"), each = n))
)
# Define colors for points fill and border
fill_colors <- c("A" = "#1a2b4c", "B" = "#c88b8b", "C" = "#89ABE3")
border_color <- "#1a2b4c"
# Plot
ggplot(df, aes(x = x, y = y, color = group, fill = group)) +
geom_point(shape = 21, size = 4, stroke = 2) + # shape 21 allows fill + border
scale_fill_manual(values = fill_colors) +
scale_color_manual(values = rep(border_color, 3)) + # same border color for all
theme_minimal() +
labs(title = "Simulated Scatterplot of 3 Distributions",
x = "X Axis", y = "Y Axis") +
theme(legend.title = element_blank())
library(ggplot2)
set.seed(123)
# Simulate data for 3 groups
n <- 50
df <- data.frame(
x = c(rnorm(n, mean = 0, sd = 1),
rnorm(n, mean = 3, sd = 1.2),
rnorm(n, mean = 6, sd = 0.8)),
y = c(rnorm(n, mean = 0, sd = 1),
rnorm(n, mean = 4, sd = 1.5),
rnorm(n, mean = 1, sd = 0.7)),
group = factor(rep(c("A", "B", "C"), each = n))
)
fill_colors <- c("A" = "#1a2b4c", "B" = "#c88b8b", "C" = "#89ABE3")
border_color <- "#1a2b4c"
ggplot(df, aes(x = x, y = y, color = group, fill = group)) +
geom_point(shape = 21, size = 4, stroke = 2) +
scale_fill_manual(values = fill_colors) +
scale_color_manual(values = rep(border_color, 3)) +
theme_void() +                     # removes background, axes, grids
theme(legend.position = "none")   # remove legend for clean logo look
set.seed(123)
# Simulate samples from 3 distributions
n <- 1000
df <- data.frame(
value = c(rnorm(n, mean = 0, sd = 1),
rexp(n, rate = 1),
rnorm(n, mean = 3, sd = 0.5)),
dist = factor(rep(c("Normal1", "Exponential", "Normal2"), each = n))
)
# Colors with transparency (alpha)
fill_colors <- c("Normal1" = "#1a2b4c", "Exponential" = "#c88b8b", "Normal2" = "#89ABE3")
ggplot(df, aes(x = value, fill = dist)) +
geom_density(alpha = 0.5, color = NA) +  # alpha for transparency, no border
scale_fill_manual(values = fill_colors) +
theme_void() +
theme(legend.position = "none")
library(ggplot2)
set.seed(200)
# Simulate samples from 3 distributions
n <- 1000
df <- data.frame(
value = c(rnorm(n, mean = 0, sd = 1),
rnorm(n, mean = 1.5, sd = 1),
rnorm(n, mean = 3, sd = 0.5)),
dist = factor(rep(c("Normal1", "Exponential", "Normal2"), each = n))
)
# Colors with transparency (alpha)
fill_colors <- c("Normal1" = "#1a2b4c", "Exponential" = "#c88b8b", "Normal2" = "#89ABE3")
ggplot(df, aes(x = value, fill = dist)) +
geom_density(alpha = 0.5, color = NA) +  # alpha for transparency, no border
scale_fill_manual(values = fill_colors) +
theme_void() +
theme(legend.position = "none")
library(ggplot2)
set.seed(200)
# Simulate samples from 3 distributions
n <- 1000
df <- data.frame(
value = c(rnorm(n, mean = 0, sd = 1),
rnorm(n, mean = 1.5, sd = 1),
rnorm(n, mean = 3, sd = 0.5)),
dist = factor(rep(c("Normal1", "Exponential", "Normal2"), each = n))
)
# Colors with transparency (alpha)
fill_colors <- c("Normal1" = "#1a2b4c", "Exponential" = "#c88b8b", "Normal2" = "#89ABE3")
ggplot(df, aes(x = value, fill = dist)) +
geom_density(alpha = 0.5, color = NA) +  # alpha for transparency, no border
scale_fill_manual(values = fill_colors) +
theme_void() +
theme(legend.position = "none")
set.seed(200)
# Simulate samples from 3 distributions
n <- 1000
df <- data.frame(
value = c(rnorm(n, mean = 0, sd = 1),
rnorm(n, mean = 1.5, sd = 1),
rnorm(n, mean = 3, sd = 0.5)),
dist = factor(rep(c("Normal1", "Exponential", "Normal2"), each = n))
)
# Colors with transparency (alpha)
fill_colors <- c("Normal1" = "#1a2b4c", "Exponential" = "#c88b8b", "Normal2" = "#89ABE3")
ggplot(df, aes(x = value, fill = dist)) +
geom_density(alpha = 0.5, color = NA) +  # alpha for transparency, no border
scale_fill_manual(values = fill_colors) +
theme_void() +
theme(legend.position = "none")
set.seed(123)
n <- 5000
df <- data.frame(
value = c(rnorm(n, mean = 0, sd = 1),
rnorm(n, mean = 3, sd = 0.8),
rnorm(n, mean = 6, sd = 1.2)),
dist = factor(rep(c("Normal1", "Normal2", "Normal3"), each = n))
)
fill_colors <- c("Normal1" = "#1a2b4c", "Normal2" = "#c88b8b", "Normal3" = "#89ABE3")
ggplot(df, aes(x = value, fill = dist)) +
geom_density(alpha = 0.5, color = NA, adjust = 1.5) +  # adjust >1 smooths more
scale_fill_manual(values = fill_colors) +
theme_void() +
theme(legend.position = "none")
set.seed(123)
n <- 5000
df <- data.frame(
value = c(rnorm(n, mean = 0, sd = 1),
rnorm(n, mean = 3, sd = 1),
rnorm(n, mean = 6, sd = 1)),
dist = factor(rep(c("Normal1", "Normal2", "Normal3"), each = n))
)
fill_colors <- c("Normal1" = "#1a2b4c", "Normal2" = "#c88b8b", "Normal3" = "#89ABE3")
ggplot(df, aes(x = value, fill = dist)) +
geom_density(alpha = 0.5, color = NA, adjust = 1.5) +  # adjust >1 smooths more
scale_fill_manual(values = fill_colors) +
theme_void() +
theme(legend.position = "none")
set.seed(123)
n <- 5000
df <- data.frame(
value = c(rnorm(n, mean = 0, sd = 1),
rnorm(n, mean = 3, sd = 1.5),
rnorm(n, mean = 6, sd = 1)),
dist = factor(rep(c("Normal1", "Normal2", "Normal3"), each = n))
)
fill_colors <- c("Normal1" = "#1a2b4c", "Normal2" = "#c88b8b", "Normal3" = "#89ABE3")
ggplot(df, aes(x = value, fill = dist)) +
geom_density(alpha = 0.5, color = NA, adjust = 1.5) +  # adjust >1 smooths more
scale_fill_manual(values = fill_colors) +
theme_void() +
theme(legend.position = "none")
set.seed(123)
n <- 5000
df <- data.frame(
value = c(rnorm(n, mean = 0, sd = 1),
rnorm(n, mean = 3, sd = 1.2),
rnorm(n, mean = 6, sd = 1)),
dist = factor(rep(c("Normal1", "Normal2", "Normal3"), each = n))
)
fill_colors <- c("Normal1" = "#1a2b4c", "Normal2" = "#c88b8b", "Normal3" = "#89ABE3")
ggplot(df, aes(x = value, fill = dist)) +
geom_density(alpha = 0.5, color = NA, adjust = 1.5) +  # adjust >1 smooths more
scale_fill_manual(values = fill_colors) +
theme_void() +
theme(legend.position = "none")
set.seed(123)
n <- 5000
df <- data.frame(
value = c(rnorm(n, mean = 0, sd = 1),
rnorm(n, mean = 3, sd = 1.4),
rnorm(n, mean = 6, sd = 1.2)),
dist = factor(rep(c("Normal1", "Normal2", "Normal3"), each = n))
)
fill_colors <- c("Normal1" = "#1a2b4c", "Normal2" = "#c88b8b", "Normal3" = "#89ABE3")
ggplot(df, aes(x = value, fill = dist)) +
geom_density(alpha = 0.5, color = NA, adjust = 1.5) +  # adjust >1 smooths more
scale_fill_manual(values = fill_colors) +
theme_void() +
theme(legend.position = "none")
set.seed(123)
n <- 5000
df <- data.frame(
value = c(rnorm(n, mean = 0, sd = 1),
rnorm(n, mean = 3, sd = 1.2),
rnorm(n, mean = 6, sd = 1.2)),
dist = factor(rep(c("Normal1", "Normal2", "Normal3"), each = n))
)
fill_colors <- c("Normal1" = "#1a2b4c", "Normal2" = "#c88b8b", "Normal3" = "#89ABE3")
ggplot(df, aes(x = value, fill = dist)) +
geom_density(alpha = 0.5, color = NA, adjust = 1.5) +  # adjust >1 smooths more
scale_fill_manual(values = fill_colors) +
theme_void() +
theme(legend.position = "none")
set.seed(123)
n <- 5000
df <- data.frame(
value = c(rnorm(n, mean = 0, sd = 1),
rnorm(n, mean = 3, sd = 1.2),
rnorm(n, mean = 6, sd = 1.5)),
dist = factor(rep(c("Normal1", "Normal2", "Normal3"), each = n))
)
fill_colors <- c("Normal1" = "#1a2b4c", "Normal2" = "#c88b8b", "Normal3" = "#89ABE3")
ggplot(df, aes(x = value, fill = dist)) +
geom_density(alpha = 0.5, color = NA, adjust = 1.5) +  # adjust >1 smooths more
scale_fill_manual(values = fill_colors) +
theme_void() +
theme(legend.position = "none")
set.seed(123)
n <- 5000
df <- data.frame(
value = c(rnorm(n, mean = 0, sd = 1),
rnorm(n, mean = 3, sd = 1.25),
rnorm(n, mean = 6, sd = 1.5)),
dist = factor(rep(c("Normal1", "Normal2", "Normal3"), each = n))
)
fill_colors <- c("Normal1" = "#1a2b4c", "Normal2" = "#c88b8b", "Normal3" = "#89ABE3")
ggplot(df, aes(x = value, fill = dist)) +
geom_density(alpha = 0.5, color = NA, adjust = 1.5) +  # adjust >1 smooths more
scale_fill_manual(values = fill_colors) +
theme_void() +
theme(legend.position = "none")
set.seed(200)
n <- 5000
df <- data.frame(
value = c(rnorm(n, mean = 0, sd = 1),
rnorm(n, mean = 3, sd = 1.25),
rnorm(n, mean = 6, sd = 1.5)),
dist = factor(rep(c("Normal1", "Normal2", "Normal3"), each = n))
)
fill_colors <- c("Normal1" = "#1a2b4c", "Normal2" = "#c88b8b", "Normal3" = "#89ABE3")
ggplot(df, aes(x = value, fill = dist)) +
geom_density(alpha = 0.5, color = NA, adjust = 1.5) +  # adjust >1 smooths more
scale_fill_manual(values = fill_colors) +
theme_void() +
theme(legend.position = "none")
set.seed(200)
n <- 5000
df <- data.frame(
value = c(rnorm(n, mean = 0, sd = 1),
rnorm(n, mean = 3, sd = 1.25),
rnorm(n, mean = 6, sd = 1.5)),
dist = factor(rep(c("Normal1", "Normal2", "Normal3"), each = n))
)
fill_colors <- c("Normal1" = "#1a2b4c", "Normal2" = "#c88b8b", "Normal3" = "#89ABE3")
ggplot(df, aes(x = value, fill = dist)) +
geom_density(alpha = 0.7, color = NA, adjust = 1.5) +  # adjust >1 smooths more
scale_fill_manual(values = fill_colors) +
theme_void() +
theme(legend.position = "none")
set.seed(500)
n <- 5000
df <- data.frame(
value = c(rnorm(n, mean = 0, sd = 1),
rnorm(n, mean = 3, sd = 1.25),
rnorm(n, mean = 6, sd = 1.5)),
dist = factor(rep(c("Normal1", "Normal2", "Normal3"), each = n))
)
fill_colors <- c("Normal1" = "#1a2b4c", "Normal2" = "#c88b8b", "Normal3" = "#89ABE3")
ggplot(df, aes(x = value, fill = dist)) +
geom_density(alpha = 0.7, color = NA, adjust = 1.5) +  # adjust >1 smooths more
scale_fill_manual(values = fill_colors) +
theme_void() +
theme(legend.position = "none")
set.seed(500)
n <- 5000
df <- data.frame(
value = c(rnorm(n, mean = 0, sd = 1),
rnorm(n, mean = 3, sd = 1.25),
rnorm(n, mean = 6, sd = 1.5)),
dist = factor(rep(c("Normal1", "Normal2", "Normal3"), each = n))
)
fill_colors <- c("Normal1" = "#89ABE3" , "Normal2" = "#c88b8b", "Normal3" ="#1a2b4c")
ggplot(df, aes(x = value, fill = dist)) +
geom_density(alpha = 0.7, color = NA, adjust = 1.5) +  # adjust >1 smooths more
scale_fill_manual(values = fill_colors) +
theme_void() +
theme(legend.position = "none")
setwd("~/Desktop/MDS/dsci-200/assets/img")
(4.4+4.2+4.4+4.2+4.5+4.4+4.9+4.5+4.7)/9
(4.8+4.7+4.4+4.6+4.7+4.6+5+5+4.9)/9
(4.7+4.4+4.5+4.6+4.6+4.5+4.9+4.7+4.7)/9
