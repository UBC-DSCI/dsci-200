# Build schedule table
schedule <- tibble(
Date = format(class_dates, "%d %b %y"),
Topic = " ",
Material = slide_paths,
Deadlines = ""
)
library(lubridate)
library(dplyr)
library(tibble)
library(tidyverse)
library(glue)
library(knitr)
library(purrr)
# Parameters
start_date <- ymd("2026-01-05")
end_date <- ymd("2026-04-10")
reading_week <- interval(ymd("2026-02-16"), ymd("2026-02-21"))  # Feb 16–20
# Holidays (specific dates)
holidays <- ymd(c("2026-04-03", "2026-04-06"))
# Generate class dates (Mon & Wed)
class_dates <- seq(start_date, end_date, by = "1 day") %>%
keep(~ wday(.x, label = TRUE) %in% c("Mon", "Wed"))
# Assign slide titles based on special dates
slide_titles <- case_when(
class_dates %within% reading_week ~ "READING WEEK",
class_dates %in% holidays ~ "HOLIDAY",
TRUE ~ "Topic"
)
# Create slide links only for regular topics
slide_paths <- if_else(
slide_titles %in% c("READING WEEK", "HOLIDAY"),
slide_titles,
glue("[{slide_titles}]()")
)
# Build schedule table
schedule <- tibble(
Date = format(class_dates, "%d %b %y"),
Topic = " ",
Material = slide_paths,
Deadlines = ""
)
# Output as markdown table
schedule_md <- knitr::kable(schedule, format = "markdown")
writeLines(schedule_md, "schedule-table.md")
library(lubridate)
library(dplyr)
library(tibble)
library(tidyverse)
library(glue)
library(knitr)
library(purrr)
# Parameters
start_date <- ymd("2026-01-05")
end_date <- ymd("2026-04-10")
reading_week <- interval(ymd("2026-02-16"), ymd("2026-02-21"))  # Feb 16–20
# Holidays (specific dates)
holidays <- ymd(c("2026-04-03", "2026-04-06"))
# Generate class dates (Mon & Wed)
class_dates <- seq(start_date, end_date, by = "1 day") %>%
keep(~ wday(.x, label = TRUE) %in% c("Mon", "Wed"))
# Assign slide titles based on special dates
slide_titles <- case_when(
class_dates %within% reading_week ~ "READING WEEK",
class_dates %in% holidays ~ "HOLIDAY",
TRUE ~ "Topic"
)
# Create slide links only for regular topics
slide_paths <- if_else(
slide_titles %in% c("READING WEEK", "HOLIDAY"),
slide_titles,
glue("[{slide_titles}]()")
)
# Build schedule table
schedule <- tibble(
Date = format(class_dates, "%d %b %y"),
Topic = " ",
Material = slide_paths,
Deadlines = ""
)
# Output as markdown table
schedule_md <- knitr::kable(schedule, format = "markdown")
writeLines(schedule_md, "schedule/schedule-table.md")
# Assign slide titles based on special dates
slide_titles <- case_when(
class_dates %within% reading_week ~ "READING WEEK",
class_dates %in% holidays ~ "HOLIDAY",
TRUE ~ "Slides"
)
library(lubridate)
library(dplyr)
library(tibble)
library(tidyverse)
library(glue)
library(knitr)
library(purrr)
# Parameters
start_date <- ymd("2026-01-05")
end_date <- ymd("2026-04-10")
reading_week <- interval(ymd("2026-02-16"), ymd("2026-02-21"))  # Feb 16–20
# Holidays (specific dates)
holidays <- ymd(c("2026-04-03", "2026-04-06"))
# Generate class dates (Mon & Wed)
class_dates <- seq(start_date, end_date, by = "1 day") %>%
keep(~ wday(.x, label = TRUE) %in% c("Mon", "Wed"))
# Assign slide titles based on special dates
slide_titles <- case_when(
class_dates %within% reading_week ~ "READING WEEK",
class_dates %in% holidays ~ "HOLIDAY",
TRUE ~ "Slides"
)
# Create slide links only for regular topics
slide_paths <- if_else(
slide_titles %in% c("READING WEEK", "HOLIDAY"),
slide_titles,
glue("[{slide_titles}]()")
)
# Build schedule table
schedule <- tibble(
Date = format(class_dates, "%d %b %y"),
Topic = " ",
Material = slide_paths,
Deadlines = ""
)
# Output as markdown table
schedule_md <- knitr::kable(schedule, format = "markdown")
writeLines(schedule_md, "schedule/schedule-table.md")
getwd()
quarto preview
getwd()
getwd()
library(DT)
# Read your dataset
df <- read_csv("schedule/data/currency-data.csv")
library(DT)
library(tidyverse)
# Read your dataset
df <- read_csv("schedule/data/currency-data.csv")
getwd()
getwd()
list.files("schedule/data")
library(DT)
library(tidyverse)
# Read your dataset
df <- read_csv("currency-data.csv")
# Render as interactive table
datatable(
df,
options = list(
pageLength = 25,
scrollX = TRUE,
autoWidth = TRUE
),
class = 'cell-border stripe hover'
)
head(df)
#| echo: false
#| message: false
#| warning: false
library(DT)
library(tidyverse)
# Read your dataset
df <- read_csv("currency-data.csv")
# Render as interactive table
kable(df, format = "html", table.attr = 'class="custom-table"')
#| echo: false
#| message: false
#| warning: false
library(knitr)
library(tidyverse)
# Read your dataset
df <- read_csv("currency-data.csv")
# Render as interactive table
kable(df, format = "html", table.attr = 'class="custom-table"')
